FIXA
issue #1 - tank out of place



TANKAR/ FÖRSLAG PÅ LÖSNINGAR 
Fast layout på bubble-området, ha resten responsivt
Skapa hela levels på en gång!  då skapas alla rader och bubblor med threats men de åker ner istället. 

BUBBLE
- Ändra bubblans bild till poäng-bild om den blir träffad, sen försvinner den
- använd elipse?
- gör bubblestorleken responsiv gentemot fönstret

SHOOTER
- klicka bara någonstans och bollen ska hamna där (sen åker tower tillbaka) 
- fire-event måste ske på touch up
 
 	TANK
 	- uppdatera position för tank efter att kordinater har ändrats

TREAT
 - tar upp 2 rader i höjd (två bubblor) och tre bubblor i höjd... nope, behöver designas som en 'blomma'...eller trekant!!!
 - ska också ha random color
 - generera en random fråga ur level 
 - lägg alla frågor i en lista, om 'avklarad', radera från listan. 
 - skapa nytt för varannan rad?
 - kanske borde ha en timer för frågorna
 - Kanske gör en ikon för olika typer av hot

- bestäm vilken rad det ska starta på mellan 1-*
- om det ligger en bubbla inom samma område som triangeln (eftersom png-bilden egentligen är fyrkantig), ta bort den istället...

BASE
- databasgrundbilden borde ligga innuti en boxlayout som är horizontal,  som i sin tur ( i ena columnen) har en gridlayout som innehåller labels för level etc och i andra en FloatLayout


ÖVRIGT
- tror floatlayout är bäst eftersom bubbles och threats kan placeras överallt
- ha den nästkommande bubbelfärgen i datarutan. + lägg ev. ev. till möjlighet att växla färg mellan de två bubblorna


#hur ska jag få threatsen blandat bland bubblorna?! ....
 - definera en startpunkt bland 1-9 
 - modifiera bubblepositionen samt hur många bubblor som ska försvinna per rad.
 - kommer det ett threat så:
  	- skapa 3 rader i taget med ett threat däri?
 - upptagna startpunkter? 

gör en fast floatLayout, med bakgrundsfärg.


#räkna ut vinkeln
 - jag har tillgång till vinkeln (hypotenusan) och tillgång till startpunkten för bubblan....hmm! 
 - startpunkten blir samma punkt som mittpunkten av top-tornet är. (har tillgång till x,y) - skapa en vector för det
 - 


varje [] räknas som en lista, och varje objekt {} kan hämtas med
for person in people_list: if person['name'] == name: return person



TIPS
#http://www.dahuatu.com/QBy99JoYy2.html
Edit: based on your image, perhaps you want circle collision, calculate the distance between the centres of the two widgets and return True if it's less than the sum of their radii, which is probably equal to the width of either of them if they're square and the circle fills the widget.



# on collision I have to check were it should be placed



# Kanske borde ha en klass som heter question?
	


GAMMAL KOD SOM KANSKE BEHÖVS
'''
print(json.dumps(data, indent=4))

#jsonL = '{ "level1": { "CSRF": [ {"question":"What does CSRF stand for?"},{"answers":[ "miii", "loo", "doo" ]}, {"correctAnswer": 0} ] }, "level2": 1 }'
            jsonL = '{ "level1": { "CSRF": [ {"question":"What does CSRF stand for?", "answers":[ "miisi", "loo", "doo" ], "correctAnswer": 0} ] }, "level2": 1 }'
            data = json.loads(jsonL)



Image:
	    source: 'graphics/table.png'
	    size_hint:None, None
	    height: root.height * 0.4
        width: root.height * 0.669
        pos: 0.5, 0
'''


'''
# the layout for the buttons etc:
	BoxLayout:
	    spacing: 15
	    padding: 20
	    
	    size: app.window.width, app.window.height *0.2
	    right: app.window.width
	    bottom: app.window.height
		
	    
	    Widget:
	        size_hint: 1, 0.5
		
		Button:
			text: 'Settings'
			bold: True
			font_size: 15
			background_normal: 'graphics/button_normal.png'
            background_down: 'graphics/button_down.png'
			on_press: root.settings_button_pressed()




canvas:
        Color:
            rgba: 1, 0, 1, 1
        Ellipse:
        	id: bubbleEllipse
            pos: self.pos
            size: 35, 35
            source: 'data/logo/kivy-icon-512.png'
'''



/*{"level1":[
    {"CSRF":[ 
    	{"question":"What does CSRF stand for?", "answers": [{"1":"Test", "2":"Cross-Site Request Forgery", "3": "Woop"} ]}
    ]},
     {"SQL-Injection":[ 
    	{"question":"What is an SQL-Injection?", "answers": [{"1":"When a user tries to ", "2":"Cross-Site Request Forgery", "3": "Woop"} ]}
    ]}
]}*/


 '''
        #get the json-file were the questions are stored
        store = JsonStore('questions.json')

        level = store.get('level' + str(level))
        
        for subject in level:
            print( 'subject', subject['CSRF'][0])
            for questionTitle in subject:
                t = Threat() 
                t.title = questionTitle

                if questionTitle == 'CSRF':
                    for question in questionTitle[0]:
                        t.title = questionTitle
                        t.question = question
                        

                print(questionTitle)
            print('___________________')

        #print(store, 'iiiiiiiiiiiiiiiiiih')
    
                best =  store.get('level1')
                print(best[0])
                test =  store.get('level')['best']
                print test
                #for key in sorted(store):
                 #   print (str(key['test']), 'WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWi')
                #res = store.get('CSRF')
                #for item in res:
                   # print "res=", str(item)
                    #print "res=", str(item[1]['answers'])
        '''